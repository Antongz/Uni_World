#!/bin/bash
# runs selected commands over matching test files
# it assumes tests are in the directory containing this script
# it assumes that the executable is in the parent directory

# outputs to check, one of parser or translator
case $1 in
demo-tokens)
	command1=lib/w-tokeniser
	command2=cat
	outputs=tokens
	echo "Testing demo tokens against tokens files."
	;;
demo-parser)
	command1=lib/w-parser
	command2=cat
	outputs=errors
	echo "Testing demo parser against errors files."
	;;
demo-parser-vm)
	command1=lib/w-parser-vm
	command2=cat
	outputs=vm
	echo "Testing working parser-vm against vm files."
	;;
demo-parser-xml)
	command1=lib/w-parser-xml
	command2=lib/w-pretty-xml
	outputs=Pxml
	echo "Testing working parser-xml against Pxml files."
	;;
demo-translator)
	command1=lib/w-parser-xml
	command2=lib/w-translator
	outputs=vm
	echo "Testing working parser-xml and working translator against vm files."
	;;
parser)
	command1=parser
	command2=cat
	outputs=errors
	echo "Testing student parser against errors files."
	;;
parser-vm)
	command1=parser-vm
	command2=cat
	outputs=vm
	echo "Testing student parser-vm against vm files."
	;;
parser-xml)
	command1=parser-xml
	command2=lib/w-pretty-xml
	outputs=Pxml
	echo "Testing student parser-xml against Pxml files."
	;;
parser-xml-translator)
	command1=parser-xml
	command2=translator
	outputs=vm
	args=
	echo "Testing student parser-xml and student translator against vm files."
	;;
translator)
	command1=lib/w-parser-xml
	command2=translator
	outputs=vm
	args=
	echo "Testing working parser-xml and student translator against vm files."
	;;
*)
	echo "Unrecognised argument - no tests will be run."
	exit -1 ;
	;;
esac

# work out relative path to tests directory
THISPWD=`pwd`

# find the test directory name
TESTDIR=`dirname $0`
cd "$TESTDIR"
TESTPWD=`pwd`

# find the parent directory name
PARENTDIR=`dirname "${TESTPWD}"`

# fix up pathnames to be displayed
if [ "$THISPWD" == "$TESTPWD" ] ; then
	TESTDIR=""
	PARENTDIR="../"
elif [ "$THISPWD" == "$PARENTDIR" ] ; then
	TESTDIR=`basename "$TESTPWD"`/
	PARENTDIR="./"
else
	echo "cd ${TESTDIR}"
	TESTDIR=`basename "$TESTPWD"`/
	PARENTDIR="./"
fi

# check we have a command1 first
if [ ! -x "../${command1}" ] ; then
	echo "Cannot find executable ${PARENTDIR}${command1}"
	exit -1
fi

# check we have a command2 if not cat
if [ "${command2}" != "cat" ] ; then
	if [ ! -x "../${command2}" ] ; then
		echo "Cannot find executable ${PARENTDIR}${command2}"
		exit -1
	fi
fi

# nullglob is set so nothing runs if there are no test files
shopt -s nullglob

# test command with all test files that have a matching output kind file
for i in *.${outputs} ; do
	input="${i%%.${outputs}}"
	if [ -f "${input}" ] ; then
		if [ ${command2} == "cat" ] ; then
			echo -n "Checking \"${PARENTDIR}${command1} ${args} < ${TESTDIR}${input} | diff - ${TESTDIR}${i}\" - test "
			if "../${command1}" ${args} < ${input} | diff -q - ${i} > /dev/null 2> /dev/null ; then
				echo passed
			else
				echo failed
			fi
		else
			echo -n "Checking \"${PARENTDIR}${command1} ${args} < ${TESTDIR}${input} | ${PARENTDIR}${command2} | diff - ${TESTDIR}${i}\" - test "
			if "../${command1}" ${args} < ${input} | "../${command2}" | diff -q - ${i} > /dev/null 2> /dev/null ; then
				echo passed
			else
				echo failed
			fi
		fi
	fi
done
